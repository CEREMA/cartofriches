# dataFile <<- "../shinyapp/data/friches/f.tup.rds"
f.xy <- readRDS(dataFile) # %>% st_set_crs(2154) %>% st_transform(4326)
# f.xy <- readRDS("data/friches/f.xy.rds") %>% st_set_crs(4326)
# Lecture des contours départementaux et régionaux
regs <- readRDS("../shinyapp/data/contours/regs.rds")
deps <- readRDS("../shinyapp/data/contours/deps.rds")
# Transformation des couches de contours départementaux et régionaux
regs2 <- regs %>% transmute(code = INSEE_REG,
libelle = NOM_REG,
type="Région",
libelle_parent = NA,
parent = NA)
deps2 <- deps %>% transmute(code = INSEE_DEP,
libelle = NOM_DEP,
type="Département",
libelle_parent = regs$NOM_REG[match(deps$INSEE_REG, regs$INSEE_REG)],
parent="Région")
# f.pols <- get_stats(regs2, f.xy)
# f.pols %>% head(1)
f.pols <- regs2
get_n <- function(targets, sources) {
i <- targets %>% st_intersects(sources)
n <- sapply(i, function(x) length(x))
return(n)
}
f.pols$n_friches_avec_projet <- f.pols %>%
get_n(f.xy %>% filter(site_statut == "friche avec projet"))
f.pols$n_friches_avec_projet <- f.pols %>%
get_n(f.xy %>% filter(site_statut == "friche avec projet"))
f.pols$n_friches_sans_projet <- f.pols %>%
get_n(f.xy %>% filter(site_statut == "friche sans projet"))
f.pols$n_friches_potentielles <- f.pols %>%
get_n(f.xy %>% filter(site_statut == "friche potentielle"))
f.pols$n_friches_potentielles <- f.pols %>%
get_n(f.xy %>% filter(site_statut == "friche potentielle"))
f.pols$n_friches_reconverties <- f.pols %>%
get_n(f.xy %>% filter(site_statut == "friche reconvertie"))
f.pols
runApp()
f.xy <<- readRDS("data/friches/f.xy.rds") %>% # st_set_crs(2154) %>% st_transform(4326) %>%
mutate(Long = st_coordinates(.)[, 1], Lat = st_coordinates(.)[, 2]) %>%
mutate(long = Long,
lat = Lat,
site_numero = site_id)  #%>% filter(id_from_file == '8227138')
f.xy <- f.xy %>%
mutate(site_type = ifelse(site_type == "agro-industrielle", "friche agro-industrielle",
ifelse(site_type == "friche hospitaliere", "friche hospitalière",site_type)))
f.tup <<- readRDS("data/friches/f.tup.rds") %>% # st_set_crs(2154) %>% st_transform(4326) %>%
mutate(site_numero = site_id) #%>% filter(id_from_file == '8227138')
# LAYER IDS
f.xy$layerId      <- paste0("friche_xy_", f.xy$site_id)
f.tup$layerId     <- paste0("friche_tup_", f.tup$site_id)
Surface_max <<- max(f.xy$unite_fonciere_surface, na.rm = TRUE)
# > STATS ---
# Affichage des stats régionales
# sous la forme de cercles
# au lancement de l'application
# regs.pts  <<- readRDS("data/stats/regs.pts.rds")
# deps.pts  <<- readRDS("data/stats/deps.pts.rds")
regs.pts  <<- readRDS("data/stats/regs.pts_MAJNico.rds")
deps.pts  <<- readRDS("data/stats/deps.pts_MAJNico.rds")
regs.pts$layerId  <- glue("stat_reg_{regs.pts$code}")
deps.pts$layerId  <- glue("stat_dep_{deps.pts$code}")
# > LISTE ----
# On construit une liste avec les différents éléments
Data <<- list(points = f.xy,
polygons = f.tup,
stats = list(regs = regs.pts,
deps = deps.pts))
# > CONTOURS ----
deps  <<- readRDS("data/contours/deps.rds")
regs  <<- readRDS("data/contours/regs.rds")
comms <<- readRDS("data/contours/comms.rds")
# EMPRISES ####
emprises <<- readRDS("data/contours/emprises.rds")
regs.pts
deps.pts
regs <- readRDS("../shinyapp/data/contours/regs.rds")
deps <- readRDS("../shinyapp/data/contours/deps.rds")
deps
dataFile <<- "../shinyapp/data/friches/f.xy.rds"
# dataFile <<- "../shinyapp/data/friches/f.tup.rds"
f.xy <- readRDS(dataFile) # %>% st_set_crs(2154) %>% st_transform(4326)
# f.xy <- readRDS("data/friches/f.xy.rds") %>% st_set_crs(4326)
# Lecture des contours départementaux et régionaux
regs <- readRDS("../shinyapp/data/contours/regs.rds")
deps <- readRDS("../shinyapp/data/contours/deps.rds")
# Transformation des couches de contours départementaux et régionaux
regs2 <- regs %>% transmute(code = INSEE_REG,
libelle = NOM_REG,
type="Région",
libelle_parent = NA,
parent = NA)
deps2 <- deps %>% transmute(code = INSEE_DEP,
libelle = NOM_DEP,
type="Département",
libelle_parent = regs$NOM_REG[match(deps$INSEE_REG, regs$INSEE_REG)],
parent="Région")
# Calcul des stats -- en fonction du producteur de données
# get_stats_producteurdonnees <- function(f.pols, f.xy){
#
#   get_n <- function(targets, sources) {
#     i <- targets %>% st_intersects(sources)
#     n <- sapply(i, function(x) length(x))
#     return(n)
#   }
#
#   # Friches MTE qualifiées
#   f.pols$n_friches_mte_qualifiees <- f.pols %>%
#     get_n(f.xy %>% filter(nature == "MTE"))
#
#   # Friches MTE non qualifiées
#   f.pols$n_friches_mte_non_qualifiees <- f.pols %>%
#     get_n(f.xy %>% filter(nature == "MTE non vérifié"))
#
#   # Nb de sites d'observatoires
#   f.pols$n_friches_observatoires <- f.pols %>%
#     get_n(f.xy %>% filter(nature == "observatoire local"))
#
#   # Nb de sites AAP
#   f.pols$n_friches_aap <- f.pols %>%
#     get_n(f.xy %>% filter(nature == "fond friche"))
#
#   # # Nb de sites Ademe
#   f.pols$n_friches_ademe <- f.pols %>%
#     get_n(f.xy %>% filter(is_ademe))
#
#   # Nb de sites remontés par des utilisateurs
#   f.pols$n_friches_user <- f.pols %>%
#     get_n(f.xy %>% filter(nature == "retour utilisateur"))
#
#   # Nb de sites MTE PV au sol
#   f.pols$n_friches_mte_pv <- f.pols %>%
#     get_n(f.xy %>% filter(is_mte_pv))
#
#   return(f.pols)
# }
get_stats <- function(f.pols, f.xy){
# f.pols <- get_stats(regs2, f.xy)
# f.pols %>% head(1)
f.pols <- regs2
get_n <- function(targets, sources) {
i <- targets %>% st_intersects(sources)
n <- sapply(i, function(x) length(x))
return(n)
}
f.pols$n_friches_avec_projet <- f.pols %>%
get_n(f.xy %>% filter(site_statut == "friche avec projet"))
f.pols$n_friches_sans_projet <- f.pols %>%
get_n(f.xy %>% filter(site_statut == "friche sans projet"))
f.pols$n_friches_potentielles <- f.pols %>%
get_n(f.xy %>% filter(site_statut == "friche potentielle"))
f.pols$n_friches_reconverties <- f.pols %>%
get_n(f.xy %>% filter(site_statut == "friche reconvertie"))
return(f.pols)
}
regs3 <- regs2 %>% get_stats(f.xy)
deps3 <- deps2 %>% get_stats(f.xy)
# Calcul des centroïdes
regs.pts  <- regs3 %>% st_centroid %>% mutate(Long = st_coordinates(.)[, 1], Lat = st_coordinates(.)[, 2])
deps.pts <- deps3 %>% st_centroid %>% mutate(Long = st_coordinates(.)[, 1], Lat = st_coordinates(.)[, 2])
deps.pts
deps3
deps2
dataFile <<- "../shinyapp/data/friches/f.xy.rds"
# dataFile <<- "../shinyapp/data/friches/f.tup.rds"
f.xy <- readRDS(dataFile) # %>% st_set_crs(2154) %>% st_transform(4326)
# f.xy <- readRDS("data/friches/f.xy.rds") %>% st_set_crs(4326)
# Lecture des contours départementaux et régionaux
regs <- readRDS("../shinyapp/data/contours/regs.rds")
deps <- readRDS("../shinyapp/data/contours/deps.rds")
# Transformation des couches de contours départementaux et régionaux
regs2 <- regs %>% transmute(code = INSEE_REG,
libelle = NOM_REG,
type="Région",
libelle_parent = NA,
parent = NA)
deps2 <- deps %>% transmute(code = INSEE_DEP,
libelle = NOM_DEP,
type="Département",
libelle_parent = regs$NOM_REG[match(deps$INSEE_REG, regs$INSEE_REG)],
parent="Région")
# Calcul des stats -- en fonction du producteur de données
# get_stats_producteurdonnees <- function(f.pols, f.xy){
#
#   get_n <- function(targets, sources) {
#     i <- targets %>% st_intersects(sources)
#     n <- sapply(i, function(x) length(x))
#     return(n)
#   }
#
#   # Friches MTE qualifiées
#   f.pols$n_friches_mte_qualifiees <- f.pols %>%
#     get_n(f.xy %>% filter(nature == "MTE"))
#
#   # Friches MTE non qualifiées
#   f.pols$n_friches_mte_non_qualifiees <- f.pols %>%
#     get_n(f.xy %>% filter(nature == "MTE non vérifié"))
#
#   # Nb de sites d'observatoires
#   f.pols$n_friches_observatoires <- f.pols %>%
#     get_n(f.xy %>% filter(nature == "observatoire local"))
#
#   # Nb de sites AAP
#   f.pols$n_friches_aap <- f.pols %>%
#     get_n(f.xy %>% filter(nature == "fond friche"))
#
#   # # Nb de sites Ademe
#   f.pols$n_friches_ademe <- f.pols %>%
#     get_n(f.xy %>% filter(is_ademe))
#
#   # Nb de sites remontés par des utilisateurs
#   f.pols$n_friches_user <- f.pols %>%
#     get_n(f.xy %>% filter(nature == "retour utilisateur"))
#
#   # Nb de sites MTE PV au sol
#   f.pols$n_friches_mte_pv <- f.pols %>%
#     get_n(f.xy %>% filter(is_mte_pv))
#
#   return(f.pols)
# }
get_stats <- function(f.pols, f.xy){
# f.pols <- get_stats(regs2, f.xy)
# f.pols %>% head(1)
# f.pols <- regs2
get_n <- function(targets, sources) {
i <- targets %>% st_intersects(sources)
n <- sapply(i, function(x) length(x))
return(n)
}
f.pols$n_friches_avec_projet <- f.pols %>%
get_n(f.xy %>% filter(site_statut == "friche avec projet"))
f.pols$n_friches_sans_projet <- f.pols %>%
get_n(f.xy %>% filter(site_statut == "friche sans projet"))
f.pols$n_friches_potentielles <- f.pols %>%
get_n(f.xy %>% filter(site_statut == "friche potentielle"))
f.pols$n_friches_reconverties <- f.pols %>%
get_n(f.xy %>% filter(site_statut == "friche reconvertie"))
return(f.pols)
}
regs3 <- regs2 %>% get_stats(f.xy)
deps3 <- deps2 %>% get_stats(f.xy)
# Calcul des centroïdes
regs.pts  <- regs3 %>% st_centroid %>% mutate(Long = st_coordinates(.)[, 1], Lat = st_coordinates(.)[, 2])
deps.pts <- deps3 %>% st_centroid %>% mutate(Long = st_coordinates(.)[, 1], Lat = st_coordinates(.)[, 2])
# Export des centroïdes
saveRDS(regs.pts, "../shinyapp/data/stats/regs.pts_MAJNico.rds")
saveRDS(deps.pts, "../shinyapp/data/stats/deps.pts_MAJNico.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("markdown")
runApp()
runApp()
runApp()
icon <- awesomeIcons(
icon = 'fa-industry',
iconColor = 'black',
library = 'fa',
markerColor = "blue"
)
source("functions.R", encoding = "UTF-8")
source("libraries.R", encoding = "UTF-8")
source("load_data.R", encoding = "UTF-8")
source("modules/mod_ban.R", encoding = "UTF-8")
Sys.setlocale("LC_TIME", "French")
# DATE DE MISE A JOUR ####
LAST_UPDATE_DATE <- "7 Mars 2024"
# PALETTE CEREMA ####
couleurs_cerema <- readRDS("data/couleurs_cerema.rds")
palette_cerema <- readRDS("data/palette_cerema.rds")
# MATOMO ####
matomo <- "matomo.txt"
# COULEURS ####
palette <- fromJSON(file = "www/palette_cerema.json")
orange <- palette$secondaire$orange
gris <- "#e4e4e4"
# LEAFLET ####
baseGroups <- c("OpenStreetMap", "Ortho IGN", "Plan IGN")
overlayGroups <- c("Parcelles IGN")
# baseGroups <- c("Ortho IGN", "Plan IGN", "OpenStreetMap", "OSM Stamen")
# overlayGroups <- c("Villes", "Parcelles IGN")
# Icônes Leaflet
icon <- awesomeIcons(
icon = 'fa-industry',
iconColor = 'black',
library = 'fa',
markerColor = "blue"
)
View(icon)
# Icônes Leaflet
icon <- awesomeIcons(
icon = 'fa-industry',
iconColor = 'black',
library = 'fa',
markerColor = "blue"
)
# Icônes Leaflet
icon <- awesomeIcons(
icon = 'fa-industry',
iconColor = 'black',
library = 'fa',
markerColor = "blue"
)
source("functions.R", encoding = "UTF-8")
# Icônes Leaflet
icon <- awesomeIcons(
icon = 'fa-industry',
iconColor = 'black',
library = 'fa',
markerColor = "blue"
)
source("load_data.R", encoding = "UTF-8")
# Icônes Leaflet
icon <- awesomeIcons(
icon = 'fa-industry',
iconColor = 'black',
library = 'fa',
markerColor = "blue"
)
source("libraries.R", encoding = "UTF-8")
# Icônes Leaflet
icon <- awesomeIcons(
icon = 'fa-industry',
iconColor = 'black',
library = 'fa',
markerColor = "blue"
)
library(shinyWidgets)
# Icônes Leaflet
icon <- awesomeIcons(
icon = 'fa-industry',
iconColor = 'black',
library = 'fa',
markerColor = "blue"
)
suppressMessages(library(rjson)) # utilisé pour récupérer la palette de couleurs en JSON
# Icônes Leaflet
icon <- awesomeIcons(
icon = 'fa-industry',
iconColor = 'black',
library = 'fa',
markerColor = "blue"
)
# message("Chargement des librairies...")
suppressMessages(library(shiny))
# Icônes Leaflet
icon <- awesomeIcons(
icon = 'fa-industry',
iconColor = 'black',
library = 'fa',
markerColor = "blue"
)
suppressMessages(library(leaflet))
# Icônes Leaflet
icon <- awesomeIcons(
icon = 'fa-industry',
iconColor = 'black',
library = 'fa',
markerColor = "blue"
)
shiny::runApp()
install.packages("yaml")
install.packages("yaml")
library(yaml)
f <- read_yaml("../shinyapp/www/actus/actus.yaml")
f
f[[1]]
actu <- f[[1]]
actu
actu
actu[[1]]
actu
actu <- f[[1]][[1]]
actu <- f[[1]][[1]]
actu <- f[[1]]
actu
actu$lien
actu <- f[[1]]
actu
actu[[1]]
actu <- f[[1]][[1]]
actu
actu$lien
actu$lien
render_actu <- function(actu) {
div(tags$a(href = actu$lien, target = "_blank",
tags$img(src = actu$image,
style = "width:100%;height:300px; object-fit:cover;display: block; margin-left: auto; margin-right: auto;")),
span(actu$titre,
style="font-family:'Marianne-BoldItalic';"))
}
render_actu(actu)
library(shiny)
render_actu <- function(actu) {
div(tags$a(href = actu$lien, target = "_blank",
tags$img(src = actu$image,
style = "width:100%;height:300px; object-fit:cover;display: block; margin-left: auto; margin-right: auto;")),
span(actu$titre,
style="font-family:'Marianne-BoldItalic';"))
}
render_actu(actu)
render_actus <- function(actus) {
res <- lapply(actus, function(x) render_actu(actu[[1]]))
return(res)
}
actus <- render_actus(f)
render_actus <- function(actus) {
res <- lapply(actus, function(x) render_actu(x[[1]]))
return(res)
}
actus <- render_actus(f)
render_actus <- function(actus) {
res <- lapply(actus, function(x) render_actu(x[[1]]))
return(res)
}
actus <- render_actus(f)
actus
install.packages("yaml")
library(yaml)
f <- read_yaml("../shinyapp/www/actus/actus.yaml")
install.packages("yaml")
# install.packages("yaml")
library(yaml)
f <- read_yaml("../shinyapp/www/actus/actus.yaml")
# install.packages("yaml")
library(yaml)
f <- read_yaml("../shinyapp/www/actus/actus.yaml")
# install.packages("yaml")
library(yaml)
f <- read_yaml("../shinyapp/www/actus/actus.yaml")
# install.packages("yaml")
library(yaml)
f <- read_yaml("../shinyapp/www/actus/")
f <- read_yaml("../shinyapp/www/actus/actus.yaml")
f
actu <- f[[1]][[1]]
actu
actu$lien
library(shiny)
render_actu <- function(actu) {
div(tags$a(href = actu$lien, target = "_blank",
tags$img(src = actu$image,
style = "width:100%;height:300px; object-fit:cover;display: block; margin-left: auto; margin-right: auto;")),
span(actu$titre,
style="font-family:'Marianne-BoldItalic';"))
}
render_actu(actu)
render_actus <- function(actus) {
res <- lapply(actus, function(x) render_actu(x[[1]]))
return(res)
}
actus <- render_actus(f)
actus
# install.packages("yaml")
library(yaml)
f <- read_yaml("../shinyapp/www/actus/actus.yaml")
f
actu <- f[[1]][[1]]
actu
actu$lien
library(shiny)
render_actu <- function(actu) {
div(tags$a(href = actu$lien, target = "_blank",
tags$img(src = actu$image,
style = "width:100%;height:300px; object-fit:cover;display: block; margin-left: auto; margin-right: auto;")),
span(actu$titre,
style="font-family:'Marianne-BoldItalic';"))
}
render_actu(actu)
render_actus <- function(actus) {
res <- lapply(actus, function(x) render_actu(x[[1]]))
return(res)
}
actus <- render_actus(f)
actus
# install.packages("yaml")
library(yaml)
f <- read_yaml("../shinyapp/www/actus/actus.yaml")
# install.packages("yaml")
library(yaml)
f <- read_yaml("../shinyapp/www/actus/actus.yaml")
f
actu <- f[[1]][[1]]
actu
actu$lien
library(shiny)
render_actu <- function(actu) {
div(tags$a(href = actu$lien, target = "_blank",
tags$img(src = actu$image,
style = "width:100%;height:300px; object-fit:cover;display: block; margin-left: auto; margin-right: auto;")),
span(actu$titre,
style="font-family:'Marianne-BoldItalic';"))
}
render_actu(actu)
render_actus <- function(actus) {
res <- lapply(actus, function(x) render_actu(x[[1]]))
return(res)
}
actus <- render_actus(f)
actus
runApp()
install.packages("janitor")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
