transform_erreur
Standard_csv$site_nom <- Standard_csv$site_nom %>%
transform_utf8
Standard_csv$geomsurf <- Standard_csv$geomsurf %>%
transform_utf8 %>%
transform_pointvirgule %>%
transform_erreur
Standard_csv$unite_fonciere_refcad <- Standard_csv$unite_fonciere_refcad %>%
transform_refcad
Standard_csv <- Standard_csv %>%
mutate(unite_fonciere_surface = round(unite_fonciere_surface,0),
local_ancien_annee = ifelse(local_ancien_annee == -1, NA,local_ancien_annee),
local_recent_annee = ifelse(local_recent_annee == -1, NA,local_ancien_annee))
write.csv2(Standard_csv,
"C:/Users/nicolas.pele/Downloads/Standard_csv.csv", row.names = FALSE)
v <- gsub("/", "-", v)
transform_date <- function(v) {
v <- gsub("/", "-", v)
v
}
Standard_csv$local_ancien_annee <- Standard_csv$local_ancien_annee %>%
transform_date
Standard_csv$local_recent_annee <- Standard_csv$local_recent_annee %>%
transform_date
write.csv2(Standard_csv,
"C:/Users/nicolas.pele/Downloads/Standard_csv.csv", row.names = FALSE)
Standard_csv$local_ancien_annee <- Standard_csv$local_ancien_annee %>%
as.character() %>%
transform_date
write.csv2(Standard_csv,
"C:/Users/nicolas.pele/Downloads/Standard_csv.csv", row.names = FALSE)
query_Standard_csv <- glue("
SELECT *
FROM donnee_finale.tagg_nico_csv_2")
Standard_csv <- st_read(pool, query = query_Standard_csv)
write.table(Standard_csv,
"C:/Users/nicolas.pele/Downloads/aa.csv")
library(readr)
# Standard_csv<- read_csv("C:/Users/nicolas.pele/Downloads/export_1.csv")
transform_utf8 <- function(v) {
v <- gsub("Ã©", "é", v)
v <- gsub("Ã¨", "è", v)
v <- gsub("Ã´", "ô", v)
v <- gsub("Ã¢", "â", v)
v <- gsub("ÃŽ", "Î", v)
v <- gsub("Ã\\s", "à", v)
v
}
transform_geom <- function(v) {
v <- gsub("\n", " ", v)
v
}
transform_erreur <- function(v) {
v <- gsub("\n", " ", v)
v
}
transform_refcad <- function(v) {
v <- gsub(",", "|", v)
v
}
transform_pointvirgule <- function(v) {
v <- gsub(";", ",", v)
v
}
transform_date <- function(v) {
v <- gsub("/", "-", v)
v
}
Standard_csv$site_identif_date <- Standard_csv$site_identif_date %>%
as.character() %>%
transform_date
Standard_csv$site_actu_date <- Standard_csv$site_actu_date %>%
transform_date
Standard_csv$activite_libelle <- Standard_csv$activite_libelle %>%
transform_utf8 %>%
transform_erreur
Standard_csv$site_nom <- Standard_csv$site_nom %>%
transform_utf8
Standard_csv$geomsurf <- Standard_csv$geomsurf %>%
transform_geom
Standard_csv$geomsurf <- Standard_csv$geomsurf %>%
transform_utf8 %>%
transform_pointvirgule %>%
transform_erreur
Standard_csv$unite_fonciere_refcad <- Standard_csv$unite_fonciere_refcad %>%
transform_refcad
Standard_csv <- Standard_csv %>%
mutate(unite_fonciere_surface = round(unite_fonciere_surface,0),
local_ancien_annee = ifelse(local_ancien_annee == -1, NA,local_ancien_annee),
local_recent_annee = ifelse(local_recent_annee == -1, NA,local_ancien_annee))
write.csv2(Standard_csv,
"C:/Users/nicolas.pele/Downloads/Standard_csv.csv", row.names = FALSE)
library(glue)
library(dplyr)
require(RPostgreSQL)
require(pool)
require(getPass)
library(dbplyr)
library(sf)
library(lubridate)
dbname       <<- "cartofriche_new"
host         <<- "172.26.39.45";
port         <<- "5432";
user         <<- 'friche_rou'
passwordfile <<- "toctoc.txt"
file.exists(passwordfile)
password <- as.character(read.table(file=passwordfile)[1,1])
pool <<- dbPool(
drv = dbDriver("PostgreSQL", max.con = 100),
dbname = dbname,
host = host,
user = user,
port = port,
password = password,
idleTimeout = 3600000
)
dbGetInfo(pool)
query_Standard_csv <- glue("
SELECT *
FROM donnee_finale.tagg_nico_csv")
Standard_csv <- st_read(pool, query = query_Standard_csv)
Standard_csv <- st_read(pool, query = query_Standard_csv)
write.table(Standard_csv,
"C:/Users/nicolas.pele/Downloads/aa.csv")
write.csv2(Standard_csv,
"C:/Users/nicolas.pele/Downloads/Standard_csv.csv", row.names = FALSE)
View(Standard_csv)
library(glue)
library(dplyr)
require(RPostgreSQL)
require(pool)
require(getPass)
library(dbplyr)
library(sf)
library(lubridate)
dbname       <<- "cartofriche_new"
host         <<- "172.26.39.45";
port         <<- "5432";
user         <<- 'friche_rou'
passwordfile <<- "toctoc.txt"
file.exists(passwordfile)
password <- as.character(read.table(file=passwordfile)[1,1])
pool <<- dbPool(
drv = dbDriver("PostgreSQL", max.con = 100),
dbname = dbname,
host = host,
user = user,
port = port,
password = password,
idleTimeout = 3600000
)
dbGetInfo(pool)
query_Standard_csv <- glue("
SELECT *
FROM donnee_finale.tagg_nico_csv")
Standard_csv <- st_read(pool, query = query_Standard_csv)
Standard_csv$proprio_personne <- Standard_csv$proprio_personne %>%
transform_refcad
transform_refcad <- function(v) {
v <- gsub(",", "|", v)
v
}
Standard_csv$proprio_personne <- Standard_csv$proprio_personne %>%
transform_refcad
Standard_csv <- Standard_csv %>%
mutate(local_ancien_annee = ifelse(local_ancien_annee == 0, NA,local_ancien_annee),
local_recent_annee = ifelse(local_recent_annee == 0, NA,local_ancien_annee))
View(Standard_csv)
Standard_csv <- Standard_csv %>%
mutate(local_ancien_annee = ifelse(local_ancien_annee == 0, NA,local_ancien_annee),
local_recent_annee = ifelse(local_recent_annee == 0, NA,local_ancien_annee)) %>%
select(., geompoint,geomsurf)
Standard_csv <- Standard_csv %>%
mutate(local_ancien_annee = ifelse(local_ancien_annee == 0, NA,local_ancien_annee),
local_recent_annee = ifelse(local_recent_annee == 0, NA,local_ancien_annee)) %>%
relocate(geompoint, .before = geomsurf)
Standard_csv <- Standard_csv %>%
mutate(local_ancien_annee = ifelse(local_ancien_annee == 0, NA,local_ancien_annee),
local_recent_annee = ifelse(local_recent_annee == 0, NA,local_ancien_annee)) %>%
relocate(geompoint, .before = geomsurf)
Standard_csv <- st_read(pool, query = query_Standard_csv)
Standard_csv$proprio_personne <- Standard_csv$proprio_personne %>%
transform_refcad
Standard_csv <- Standard_csv %>%
mutate(local_ancien_annee = ifelse(local_ancien_annee == 0, NA,local_ancien_annee),
local_recent_annee = ifelse(local_recent_annee == 0, NA,local_ancien_annee)) %>%
relocate(geompoint, .before = geomsurf)
View(Standard_csv)
table(Standard_csv$site_statut)
Standard_csv <- Standard_csv %>%
mutate(local_ancien_annee = ifelse(local_ancien_annee == 0, NA,local_ancien_annee),
local_recent_annee = ifelse(local_recent_annee == 0, NA,local_ancien_annee),
site_statut = ifelse(site_statut == "site avec projet", NA,"friche avec projet")) %>%
relocate(geompoint, .before = geomsurf)
write.csv2(Standard_csv,
"C:/Users/nicolas.pele/Downloads/Standard_csv.csv", row.names = FALSE)
Standard_csv <- st_read(pool, query = query_Standard_csv)
write.csv2(Standard_csv,
"C:/Users/nicolas.pele/Downloads/Standard_csv.csv", row.names = FALSE)
Standard_csv <- st_read(pool, query = query_Standard_csv)
write.csv2(Standard_csv,
"C:/Users/nicolas.pele/Downloads/Standard_csv.csv", row.names = FALSE)
Standard_csv <- Standard_csv %>%
mutate(local_ancien_annee = ifelse(local_ancien_annee == 0, NA,local_ancien_annee),
local_recent_annee = ifelse(local_recent_annee == 0, NA,local_ancien_annee),
site_statut = ifelse(site_statut == "site avec projet", NA,"friche avec projet"))
write.csv2(Standard_csv,
"C:/Users/nicolas.pele/Downloads/Standard_csv.csv", row.names = FALSE)
shiny::runApp()
head(f.tup)
table(f.tup$urba_zone_type)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
summary(f.tup$urba_zone_type)
View(f.tup)
runApp()
shiny::runApp()
library(glue)
library(dplyr)
require(RPostgreSQL)
require(pool)
require(getPass)
library(dbplyr)
library(sf)
library(lubridate)
library(readr)
dbname       <<- "cartofriche_new"
host         <<- "172.26.39.45";
port         <<- "5432";
user         <<- 'friche_rou'
passwordfile <<- "toctoc.txt"
file.exists(passwordfile)
password <- as.character(read.table(file=passwordfile)[1,1])
pool <<- dbPool(
drv = dbDriver("PostgreSQL", max.con = 100),
dbname = dbname,
host = host,
user = user,
port = port,
password = password,
idleTimeout = 3600000
)
dbGetInfo(pool)
# Import des données
# corres_catpro3 <- read.csv2("data/corres_catpro3.csv") %>% rename(l_catpro3 = catpro3)
# referenceCols <- read.table("reference_cols.txt")[, 1] %>% as.character %>% sort
# referenceCols_s <- paste(referenceCols, collapse=", ")
#
# query_point <- glue("
#   select
#   {referenceCols_s},
#   geompoint
#   from w_cartofriche.t3_table_pivot_geom
#   where geompoint notnull")
#
# query_polygon <- glue("
#   select
#   {referenceCols_s},
#   geom
#   from w_cartofriche.t3_table_pivot_geom
#   where geom notnull")
query_producteur <- glue("
SELECT *
FROM donnee_meta.producteur")
f_Producteur <- st_read(pool, query = query_producteur)%>%
rename("producteur_fk" = "pk")
## Recodage de f_Producteur$nature
f_Producteur$nature[f_Producteur$nature == "MTE\n"] <- "MTE"
# On regarde la table historique ?
# https://gitlab.cerema.fr/mathieu.rajerison/cartofriches-new/-/blob/main/scripts/notebooks/2-pv-mte-2022/2-preparer-donnees.Rmd
query_polygon <- glue("
WITH i AS (
SELECT
t.pk, t.site_id, id_from_file,
site_nom, site_type, site_adresse, site_identif_date,
site_actu_date, site_occupation, site_url, site_ademe_url, site_securite,
case when m.site_statut is not null  then
m.site_statut
else
t.site_statut
end as site_statut,
case when m.site_surface is not null  then
m.site_surface
else
t.site_surface
end as site_surface,
m.site_reconv_type,
site_projet_etude, site_projet,
site_numero_basias, site_numero_basol, activite_libelle, activite_code, activite_fin_annee, comm_nom, comm_insee,
dep, bati_type, bati_nombre, bati_surface, bati_pollution, bati_vacance, bati_patrimoine, bati_etat,
local_ancienne_annee, local_recent_annee, jdatatmin, jdatatmax, date_mutation, proprio_type, proprio_personne, proprio_nom, sol_pollution_annee,
sol_pollution_existe, sol_pollution_origine, sol_pollution_commentaire, sol_depollution_fiche,
l_idtup, unite_fonciere_surface, l_idpar, l_ddenom, l_catpro3,l_catpro3txt, urba_zone_type, urba_zone_lib,
urba_zone_formdomi, urba_doc_type, desserte_distance_route, desserte_distance_ferroviaire, urba_datappro,
desserte_distance_fluvial, desserte_distance_maritime, desserte_commentaire, producteur_fk,
source_nom,
geomw
FROM donnee_finale.tagg as t LEFT JOIN donnee_nicolas.modifs_friches AS m on t.site_id = m.site_id
)
SELECT *
FROM i
WHERE i.site_statut <> 'A supprimer'
")
f_TUP <- st_read(pool, query = query_polygon) %>%
rename(geom = geomw)
# f_TUP <- st_read("C:/Users/nicolas.pele/Downloads/cartofriche_1.gpkg") %>%
#   rename(geom = geomw)
f_TUP <- f_TUP %>%
left_join(f_Producteur, by = "producteur_fk") %>%
mutate(source_r = ifelse(source_producteur %in% c("DDT  Ain"),"Ain",
ifelse(source_producteur %in% c("Commune de Fougères"),"Fougères",
ifelse(source_producteur %in% c("ADUGA"),"ADUGA",
ifelse(source_producteur %in% c("Région Occitanie"),"Occitanie",
ifelse(source_producteur %in% c("EPF Grand Est"),"Grand Est",
ifelse(source_producteur %in% c("Grand  Angoulême"),"Grand Angoulême",
ifelse(source_producteur %in% c("DDT de la Marne"),"Marne",
ifelse(source_producteur %in% c("DDT des Ardennes"),"Ardennes",
ifelse(source_producteur %in% c("EPF Normandie"),"Normandie",
ifelse(source_producteur %in% c("DDT 80"),"Somme",
ifelse(source_producteur %in% c("Contribution utilisateur"),"User",
ifelse(source_producteur %in% c("Contributeur Cerema"),"User",
ifelse(source_producteur %in% c("Appel à projet Fonds Friches"),"AAP",
ifelse(source_producteur %in% c("Cerema"),"MTE",
ifelse(source_producteur %in% c("lou dupont"),"MTE",
ifelse(source_producteur %in% c("Friche étude Ademe 2021"),"Ademe",
ifelse(source_producteur %in% c("Cerema AO Ademe"),"Ademe",
ifelse(source_producteur %in% c("DDT 15"),"Cantal",
ifelse(source_producteur %in% c("Ademe"),"MTE PV",
"ERREUR")))))))))))))))))))
) %>%
mutate(is_observatoire = ifelse(nature == "observatoire local",T,F),
is_user = ifelse(nature == "retour utilisateur",T,F),
is_mte_pv = ifelse(nature == "Ademe",T,F),  ###
is_aap = ifelse(nature == "fond friche",T,F),
is_ademe = ifelse(source_r == "Ademe",T,F), ###
is_mte = ifelse(source_r %in% c("MTE","Ademe") & nature != "MTE non vérifié",T,F),
is_mte_non_expertise = ifelse(nature == "MTE non vérifié",T,F),
# is_checked = ifelse(nature == "MTE" & est_verifie == T,T,F),
checked = ifelse(nature == "MTE non vérifié",F,T)
)  %>%
mutate(urba_zone_formdomi_txt = ifelse(urba_zone_formdomi == "01","Habitat",
ifelse(urba_zone_formdomi == "02","Activité",
ifelse(urba_zone_formdomi == "03","Mixte Habitat / activité",
ifelse(urba_zone_formdomi == "04","Loisir et tourisme",
ifelse(urba_zone_formdomi == "PCI","PCI",urba_zone_formdomi)))))) %>%
mutate(local_ancienne_annee = as.POSIXct(jdatatmin, format = "%d%m%Y"),
local_recent_annee = as.POSIXct(jdatatmax, format = "%d%m%Y")) %>%
mutate(proprio_nom = l_ddenom,
proprio_type = l_catpro3,
source_nom = nom_prodcartofriches) %>%
select(-l_ddenom,
-jdatatmin,
-jdatatmax,
-l_catpro3) %>%
mutate(a = ymd(paste0(urba_datappro,"01")),
urba_datappro = format(a,"%m/%Y")) %>%
select(-a) %>%
mutate(nom_prodcartofriches = ifelse(nom_prodcartofriches == "DDT de la Somme","DDTM de la Somme",nom_prodcartofriches),
site_statut = ifelse(site_statut == "site avec projet", "friche avec projet",site_statut))
transform_utf8 <- function(v) {
v <- gsub("Ã©", "é", v)
v <- gsub("Ã¨", "è", v)
v <- gsub("Ã´", "ô", v)
v <- gsub("Ã¢", "â", v)
v <- gsub("ÃŽ", "Î", v)
v <- gsub("Ã\\s", "à", v)
v
}
f_TUP$activite_libelle <- f_TUP$activite_libelle %>%
transform_utf8
f_TUP$site_nom <- f_TUP$site_nom %>%
transform_utf8
f_XY  <- f_TUP %>%
st_centroid %>%
mutate(Long = st_coordinates(.)[, 1],
Lat = st_coordinates(.)[, 2])
# saveRDS(f_XY, "data/friches/f.xy_sans_ff_20231002.rds")
# saveRDS(f_TUP, "data/friches/f.tup_sans_ff_20231002.rds")
# library(rgeos)
# f_XY_test <- gCentroid(as(f_TUP, "Spatial"), byid = TRUE) %>% st_as_sf
#
# st_write(f_XY,
#          "files/bugTEST_fXY.gpkg", delete_dsn = T)
#
# library(ggplot2)
# ggplot() +
#   geom_sf(data = f_XY_test, fill = 'white')
table(f_TUP$nom_prodcartofriches)
table(f_TUP$nature)
table(f_TUP$site_statut)
saveRDS(f_XY, "data/friches/f.xy.rds")
saveRDS(f_TUP, "data/friches/f.tup.rds")
# Lecture du fichier de données
dataFile <<- "data/friches/f.xy.rds"
# dataFile <<- "data/friches/f.xy.rds"
f.xy <- readRDS(dataFile) # %>% st_set_crs(2154) %>% st_transform(4326)
# f.xy <- readRDS("data/friches/f.xy.rds") %>% st_set_crs(4326)
# Lecture des contours départementaux et régionaux
regs <- readRDS("data/contours/regs.rds")
deps <- readRDS("data/contours/deps.rds")
# Transformation des couches de contours départementaux et régionaux
regs2 <- regs %>% transmute(code = INSEE_REG,
libelle = NOM_REG,
type="Région",
libelle_parent = NA,
parent = NA)
deps2 <- deps %>% transmute(code = INSEE_DEP,
libelle = NOM_DEP,
type="Département",
libelle_parent = regs$NOM_REG[match(deps$INSEE_REG, regs$INSEE_REG)],
parent="Région")
# Calcul des stats
get_stats <- function(f.pols, f.xy){
get_n <- function(targets, sources) {
i <- targets %>% st_intersects(sources)
n <- sapply(i, function(x) length(x))
return(n)
}
# Friches MTE qualifiées
f.pols$n_friches_mte_qualifiees <- f.pols %>%
get_n(f.xy %>% filter(nature == "MTE"))
# Friches MTE non qualifiées
f.pols$n_friches_mte_non_qualifiees <- f.pols %>%
get_n(f.xy %>% filter(nature == "MTE non vérifié"))
# Nb de sites d'observatoires
f.pols$n_friches_observatoires <- f.pols %>%
get_n(f.xy %>% filter(nature == "observatoire local"))
# Nb de sites AAP
f.pols$n_friches_aap <- f.pols %>%
get_n(f.xy %>% filter(nature == "fond friche"))
# # Nb de sites Ademe
f.pols$n_friches_ademe <- f.pols %>%
get_n(f.xy %>% filter(is_ademe))
# Nb de sites remontés par des utilisateurs
f.pols$n_friches_user <- f.pols %>%
get_n(f.xy %>% filter(nature == "retour utilisateur"))
# Nb de sites MTE PV au sol
f.pols$n_friches_mte_pv <- f.pols %>%
get_n(f.xy %>% filter(is_mte_pv))
return(f.pols)
}
regs3 <- regs2 %>% get_stats(f.xy)
deps3 <- deps2 %>% get_stats(f.xy)
# Calcul des centroïdes
regs.pts  <- regs3 %>% st_centroid %>% mutate(Long = st_coordinates(.)[, 1], Lat = st_coordinates(.)[, 2])
deps.pts <- deps3 %>% st_centroid %>% mutate(Long = st_coordinates(.)[, 1], Lat = st_coordinates(.)[, 2])
# Export des centroïdes
saveRDS(regs.pts, "data/stats/regs.pts_MAJNico.rds")
saveRDS(deps.pts, "data/stats/deps.pts_MAJNico.rds")
runApp()
shiny::runApp()
install.packages("testthat")
install.packages("testthat")
install.packages("testthat")
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
f.xy
Dataframe <- f.xy %>%
mutate(urba_zone_type_regroup = ifelse(urba_zone_type %in% c("A","Ah"),"A",
ifelse(urba_zone_type %in% c("AUs","AUc"),"AU",
ifelse(urba_zone_type %in% c("N","Nh"),"N",
ifelse(urba_zone_type %in% c("U"),"U",
ifelse(is.na(urba_zone_type),"CC",urba_zone_type)))))) %>%
mutate(site_surface = round(as.numeric(site_surface)/10000,2)) %>%
mutate(site_surface_tri = ifelse(site_surface > 49, 50, site_surface)) %>%
filter(dep %in% input$INPUT_ChoixDep) %>%
filter(site_statut %in% input$INPUT_Site_statut) %>%
filter(site_surface_tri >= as.numeric(input$INPUT_FILTRE_SURFACE_TABLEAU_slider[1]),
site_surface_tri <= as.numeric(input$INPUT_FILTRE_SURFACE_TABLEAU_slider[2])) %>%
filter(nature %in% input$INPUT_FILTRE_Producteur) %>%
filter(site_type %in% input$INPUT_FILTRE_Site_type) %>%
filter(urba_zone_type_regroup %in% input$INPUT_FILTRE_ZONEURBA_TABLEAU)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
icon("paper-plane", color="white")
icon("paper-plane") %>% as.character()
icon("paper-plane", color="white") %>% as.character()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list=ls())
runApp()
sessionInfo()
?icon
icon("paper-plane", style = "color:white")
icon("paper-plane", style = "color:white") %>% as.character()
tags$i(class="far fa-paper-plane", role="presentation" aria-label="paper-plane icon", style="color:white")
tags$i(class="far fa-paper-plane", role="presentation", aria-label="paper-plane icon", style="color:white")
tags$i(class="far fa-paper-plane", role="presentation", aria_label="paper-plane icon", style="color:white")
tags$i(class="far fa-paper-plane", role="presentation", `aria-label`="paper-plane icon", style="color:white")
runApp()
shiny::runApp()
